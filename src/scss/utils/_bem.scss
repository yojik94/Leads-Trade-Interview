//== Usage
// @include b(test) {
//  background: red;
//  @include e(element){
//    font-size: 14px;
//
//    @include m(big) {
//      font-size: 18px;
//    }
//  };
//  @include m(modifier) {
//    color: blue;
//
//    @include e(subelement) {
//      background: gray;
//    }
//  }
// }
//== Result
//. test {
//  background: red;
// }
//. test__element {
//  font-size: 14px;
// }
// .test__element_big {
//  font-size: 18px;
// }
// .test_modifier {
//  color: blue;
// }
// .test_modifier .test__subelement {
//  background: gray;
// }

$elementSeparator: '__';
$modifierSeparator: '_';

@function selectorToString($selector) {
  $selector: inspect($selector);
  $selector: str-slice($selector, 2, -2);
  @return $selector;
}

@function containsModifier($selector) {
  $selector: selectorToString($selector);
  @if str-index($selector, $modifierSeparator) {
    @return true;
  } @else {
    @return false;
  }
}

@function getBlock($selector) {
  $selector: selectorToString($selector);
  $modifierStart: str-index($selector, $modifierSeparator) - 1;
  @return str-slice($selector, 0, $modifierStart);
}

@mixin b($block) {
  .#{$block} {
    @content;
  }
}

@mixin e($element) {
  $selector: &;
  @if containsModifier($selector) {
    $block: getBlock($selector);
    @at-root {
      #{$selector} {
        #{$block+$elementSeparator+$element} {
          @content;
        }
      }
    }
  } @else {
    @at-root {
      #{$selector+$elementSeparator+$element} {
        @content;
      }
    }
  }
}

@mixin m($modifier) {
  @at-root {
    #{&}#{$modifierSeparator+$modifier} {
      @content;
    }
  }
}